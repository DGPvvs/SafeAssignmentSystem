// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SafeAssignmentSystem.Core.Data;

#nullable disable

namespace SafeAssignmentSystem.DataBase.Migrations
{
    [DbContext(typeof(SafeAssignmentDbContext))]
    [Migration("20230628174053_SeedDataBase")]
    partial class SeedDataBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.DatabaseModels.Account.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Собствено име на потребител");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Фамилно име на потребител");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserWorkNumber")
                        .HasColumnType("int")
                        .HasComment("Табелен номер на потребителя");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("Модел на потребителите");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3bd76d51-384b-4233-a83e-40e1e1a355dc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "974e0db5-5acf-4036-8bed-83b03f7c48ca",
                            EmailConfirmed = false,
                            FirstName = "Дан",
                            LastName = "Игнатов",
                            LockoutEnabled = false,
                            NormalizedUserName = "IGNATOV.DAN",
                            PasswordHash = "AQAAAAEAACcQAAAAECFv3dMdZjKswGDhWhWe8dosgXNCPDvUz/SPZg2Cf9pLhrt3DxjqXQn0cuRd9ZWAvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91a759ec-37aa-4f58-ba8b-9700cc3af6a5",
                            TwoFactorEnabled = false,
                            UserName = "Ignatov.Dan",
                            UserWorkNumber = 88327
                        },
                        new
                        {
                            Id = new Guid("789fd6e8-ea96-4af7-b417-75284395ceeb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58eb59cc-ebd6-4db8-a529-abf87e774e0a",
                            EmailConfirmed = false,
                            FirstName = "Сергей",
                            LastName = "Попов",
                            LockoutEnabled = false,
                            NormalizedUserName = "POPOV.SERGEY",
                            PasswordHash = "AQAAAAEAACcQAAAAEAD6Ox9x3baDowKi3YYMH/cNYKhVrurHI/4pw2RAkp2Lo3nSvWhgrb95NVr/ITJvjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb4ce52e-baa3-40fe-93f5-fde83fa36c8e",
                            TwoFactorEnabled = false,
                            UserName = "Popov.Sergey",
                            UserWorkNumber = 38011
                        },
                        new
                        {
                            Id = new Guid("15116ebd-a590-489b-96f3-f4b87352ceb3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a046e20-88e9-4cac-988f-edecc093636e",
                            EmailConfirmed = false,
                            FirstName = "Жерар",
                            LastName = "Славчев",
                            LockoutEnabled = false,
                            NormalizedUserName = "GERAR.SLAVTCHEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEDQan48xhDANrnVqrnrSk1xuVVzkOvOTbL1FxBNV6zAPbP9udmBcVwoPWKvk0QjWkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0177d2d-1ebb-48d8-b39c-4932b37139be",
                            TwoFactorEnabled = false,
                            UserName = "Gerar.Slavtchev",
                            UserWorkNumber = 45571
                        },
                        new
                        {
                            Id = new Guid("46704eca-2943-4635-ae5b-0b9a4a9fa274"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "237a3e3b-33e9-4aeb-969e-a3de47d4032f",
                            EmailConfirmed = false,
                            FirstName = "Руси",
                            LastName = "Магичов",
                            LockoutEnabled = false,
                            NormalizedUserName = "RUSI.MAGITCHOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ+dxqI+/b2OxZmtbD5KiFljCMf5T6gJqEiahTIUgq+m8xlpCvxObt+5UyRULKsUfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7eb02612-8cfc-453a-a445-8632116d5a62",
                            TwoFactorEnabled = false,
                            UserName = "Rusi.Magitchov",
                            UserWorkNumber = 44454
                        },
                        new
                        {
                            Id = new Guid("ecd856e4-96da-4296-a482-6f66680f1380"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd85c5c8-f39f-4974-9aef-99dcb71a737b",
                            EmailConfirmed = false,
                            FirstName = "Биню",
                            LastName = "Тошков",
                            LockoutEnabled = false,
                            NormalizedUserName = "BINUY.TOCHKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEM06i1wa12/RK3lMArc4KApRYIYVC9WmVW+EUDlEznpsgzwo8keHmvQrvHOXLN1Rcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2b85809-06c8-4e74-916a-57c54cb5ecd6",
                            TwoFactorEnabled = false,
                            UserName = "Binuy.Tochkov",
                            UserWorkNumber = 61815
                        },
                        new
                        {
                            Id = new Guid("822edebf-23a5-4373-b56d-94078d984192"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1165160-2869-4565-8043-26e2ec6deb55",
                            EmailConfirmed = false,
                            FirstName = "Пейо",
                            LastName = "Ленков",
                            LockoutEnabled = false,
                            NormalizedUserName = "PEYO.LENKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEDDJoxvsbEzuOCE3eI4rcyqnS5x0W8DDrGVf0XHKvA6Qte90DketIqjX8LqfoRMGgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d6b0f6b-534f-4ef1-a842-6c57613b73f5",
                            TwoFactorEnabled = false,
                            UserName = "Peyo.Lenkov",
                            UserWorkNumber = 62230
                        },
                        new
                        {
                            Id = new Guid("878d9e51-f7c1-4460-b502-6d3611acc9de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2246f574-2edd-4e39-a046-8cf16a08b4f3",
                            EmailConfirmed = false,
                            FirstName = "Аню",
                            LastName = "Панчев",
                            LockoutEnabled = false,
                            NormalizedUserName = "ANUY.PANTCHEV",
                            PasswordHash = "AQAAAAEAACcQAAAAENm1glJQJnhm5/3rM0ghy8FDzwDXd4CgPIfSfEuktGGpsUUc1tbPrZL8h6a5b8F5MA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "936d9a89-2ddb-4191-9ed9-10b3dc8724ab",
                            TwoFactorEnabled = false,
                            UserName = "Anuy.Pantchev",
                            UserWorkNumber = 65072
                        },
                        new
                        {
                            Id = new Guid("3e3070f2-48d9-4aa4-a760-5654f7d59b14"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22ee48ca-96c3-4482-99b4-8c0bf0c4f4bc",
                            EmailConfirmed = false,
                            FirstName = "Флоро",
                            LastName = "Станов",
                            LockoutEnabled = false,
                            NormalizedUserName = "FLORO.STANOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEHmmKG+CcRPQmnlgAXdTutUZKYwgOR0HHa7R9Cqi+fhrE1vLpJraZzdNEL2aNanHLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5e292330-ac08-44ea-9b8b-827c5ff35fea",
                            TwoFactorEnabled = false,
                            UserName = "Floro.Stanov",
                            UserWorkNumber = 71417
                        },
                        new
                        {
                            Id = new Guid("dc64720a-db37-48a3-b0d9-da13abec71f7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ca2b297-e044-4f3d-96dc-c8971ca432f0",
                            EmailConfirmed = false,
                            FirstName = "Доко",
                            LastName = "Цанимиров",
                            LockoutEnabled = false,
                            NormalizedUserName = "DOKO.TSANIMIROV",
                            PasswordHash = "AQAAAAEAACcQAAAAELm/1XAWMCiNWzcXx3n5BII4KARtJcdp/aeOMa8v8Slo4mXO7mhSRKAV0xcgXA02hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "421e4772-66d6-4e5a-8d0a-d32085ca843a",
                            TwoFactorEnabled = false,
                            UserName = "Doko.Tsanimirov",
                            UserWorkNumber = 46929
                        },
                        new
                        {
                            Id = new Guid("cb0d669c-0739-46cb-af7e-135b3c1359ab"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65908e82-df40-498c-8b13-2183ccd0ed5a",
                            EmailConfirmed = false,
                            FirstName = "Силвиян",
                            LastName = "Янов",
                            LockoutEnabled = false,
                            NormalizedUserName = "SILVIYAN.YANKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAED2Fqq1q4S40mJGjb3md+8r4Y7Dw5YvgUwETDlBlLxympxqyYJ4GRjmRF8tk5pdc9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77162484-04de-4ab0-baf5-8fb4f443db05",
                            TwoFactorEnabled = false,
                            UserName = "Silviyan.Yankov",
                            UserWorkNumber = 52291
                        },
                        new
                        {
                            Id = new Guid("c6f014d9-2816-4d1d-961f-9d313dbeb2ea"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb24ea1f-9979-42c6-8d72-70bcfa414741",
                            EmailConfirmed = false,
                            FirstName = "Менко",
                            LastName = "Мирков",
                            LockoutEnabled = false,
                            NormalizedUserName = "MENKO.MIRKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEAHaa1hEpP4BGxYJNsWt3g9ZLwWCam/K/zLhEvHkCyAQ/CNrbaJmuc1D/cpBQ4gm1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a3527eb-ba61-4d4c-9821-58f9c0f2fd89",
                            TwoFactorEnabled = false,
                            UserName = "Menko.Mirkov",
                            UserWorkNumber = 19386
                        },
                        new
                        {
                            Id = new Guid("291a943f-27f5-45ec-b38a-c97f4e2cba89"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fda2e5b4-96ca-4866-bb04-67e180488306",
                            EmailConfirmed = false,
                            FirstName = "Лазо",
                            LastName = "Шишманов",
                            LockoutEnabled = false,
                            NormalizedUserName = "LAZO.CHICHMANOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEBiK49KmL1QlrFHhKABH1OhPpQEHng5ZYDHJyig15waVD3rXO79SnhyOjCAIAs18iw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ee59023-50a2-4a4a-b532-c2a9371d3ee9",
                            TwoFactorEnabled = false,
                            UserName = "Lazo.Chichmanov",
                            UserWorkNumber = 68340
                        },
                        new
                        {
                            Id = new Guid("08972cfc-c9f9-40fd-8bd9-5cb1a2137512"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ba50754-411d-4a37-a59b-050beaf12576",
                            EmailConfirmed = false,
                            FirstName = "Столипен",
                            LastName = "Тонев",
                            LockoutEnabled = false,
                            NormalizedUserName = "STOLIPEN.TONEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEAKsN3u0uq4vrqF6b1HMnA4SGesNlQs2ovu2JcriiWVoCFUQrt3ck2FXKaqAmH7gqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d387d121-5195-4c02-8db4-390783ff4d28",
                            TwoFactorEnabled = false,
                            UserName = "Stolipen.Tonev",
                            UserWorkNumber = 38744
                        },
                        new
                        {
                            Id = new Guid("68c22160-dd62-44e3-b9fa-a5285aeed74a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1296e587-5335-42f3-a12d-80e48624ff38",
                            EmailConfirmed = false,
                            FirstName = "Дарен",
                            LastName = "Павков",
                            LockoutEnabled = false,
                            NormalizedUserName = "DAREN.PAVKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEOsuL15rhqbX4E38xR7iT5UkWZhbPKIJMNrIBeVhblxQThC3q9DlloQNiFQq2/Xe4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5cc9c313-91e4-46e1-8b07-12889ec2c98a",
                            TwoFactorEnabled = false,
                            UserName = "Daren.Pavkov",
                            UserWorkNumber = 98129
                        },
                        new
                        {
                            Id = new Guid("d5ebbc22-5405-4a37-94d5-b76cb8dd489a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb233a6f-ddaa-4269-9ccd-f02e55b4dd4a",
                            EmailConfirmed = false,
                            FirstName = "Драгни",
                            LastName = "Тодоров",
                            LockoutEnabled = false,
                            NormalizedUserName = "DRAGNI.TODOROV",
                            PasswordHash = "AQAAAAEAACcQAAAAEC0TeVxYMe2/6KrW6605U+HY6OatXYzNG7SWqcmsMRb9VrRyhWmOv9c3vdCq139z3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40317e02-5a32-487c-8eac-a2d887bad879",
                            TwoFactorEnabled = false,
                            UserName = "Dragni.Todorov",
                            UserWorkNumber = 80738
                        },
                        new
                        {
                            Id = new Guid("6a1a286e-7523-4b64-bec5-a5350b4f8169"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff6e3170-ea4d-43ef-819b-2ad9f00a752a",
                            EmailConfirmed = false,
                            FirstName = "Данимил",
                            LastName = "Тинков",
                            LockoutEnabled = false,
                            NormalizedUserName = "DANIMIL.TINKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAENjuPZ8zye8ObrH0E2z5fXqS3VXJ4KOw7+t40o4siJccxYgjzz9IMpFkegz7TX9/FA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dda34854-cfa7-4219-95a6-f2eac7c966bb",
                            TwoFactorEnabled = false,
                            UserName = "Danimil.Tinkov",
                            UserWorkNumber = 70677
                        },
                        new
                        {
                            Id = new Guid("b5459434-2a22-47eb-b993-775edc6f4bf1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "baed227f-d521-4263-8169-dff032bbf3af",
                            EmailConfirmed = false,
                            FirstName = "Дориян",
                            LastName = "Славейков",
                            LockoutEnabled = false,
                            NormalizedUserName = "DORIYAN.SLAVEYKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEBviSwvJIoKkk23Lh6UmUxmF/2Y/svtA+fkLGyKO/e8j+c6+FWcEJ5hkle6Qsj2nlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "88f3635a-c95f-42e0-abc2-0c031781692d",
                            TwoFactorEnabled = false,
                            UserName = "Doriyan.Slaveykov",
                            UserWorkNumber = 39676
                        },
                        new
                        {
                            Id = new Guid("984b9932-5e9b-4bc9-a923-4099f7d488b2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "896c2224-a0ea-4d3f-ac25-64b5d1293598",
                            EmailConfirmed = false,
                            FirstName = "Друмчо",
                            LastName = "Светозаров",
                            LockoutEnabled = false,
                            NormalizedUserName = "DRUMTCHO.SVETOZAROV",
                            PasswordHash = "AQAAAAEAACcQAAAAEBuEylhXf0TaFvhXhnNgfeGe+nNwtNYXQdjR5sdvUX1rCjK7SbzVzBjWIky67mvC5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08f37f40-7197-45ed-837c-02d5a69b83ff",
                            TwoFactorEnabled = false,
                            UserName = "Drumtcho.Svetozarov",
                            UserWorkNumber = 35236
                        },
                        new
                        {
                            Id = new Guid("f91c5b35-506c-4987-a89a-fba703b53f03"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "525d1a89-4871-4c70-b664-135fbcacf10e",
                            EmailConfirmed = false,
                            FirstName = "Захари",
                            LastName = "Тодеев",
                            LockoutEnabled = false,
                            NormalizedUserName = "ZAHARI.TODEEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ+4sahvKmqw8t1fBNkgMvqf1wif2mhZwGbILqQ6eTU55GzIrifa5hYytKiMLEWfUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19fff5d0-c42f-4fb4-8c8b-cbf01e4c54cd",
                            TwoFactorEnabled = false,
                            UserName = "Zahari.Todeev",
                            UserWorkNumber = 50975
                        });
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.DatabaseModels.Account.ApplicationUserPlantInstalation", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id на потребител");

                    b.Property<Guid>("InstalationId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id на инсталация");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Поле указващо дали записът е изтрит");

                    b.HasKey("UserId", "InstalationId");

                    b.HasIndex("InstalationId");

                    b.ToTable("ApplicationUserPlantInstalations");

                    b.HasComment("Свързваща таблица между потребителите и инсталациите");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("3bd76d51-384b-4233-a83e-40e1e1a355dc"),
                            InstalationId = new Guid("13d901bf-8203-4280-ae70-24eef3fed196"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("3bd76d51-384b-4233-a83e-40e1e1a355dc"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("789fd6e8-ea96-4af7-b417-75284395ceeb"),
                            InstalationId = new Guid("13d901bf-8203-4280-ae70-24eef3fed196"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("789fd6e8-ea96-4af7-b417-75284395ceeb"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("15116ebd-a590-489b-96f3-f4b87352ceb3"),
                            InstalationId = new Guid("13d901bf-8203-4280-ae70-24eef3fed196"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("15116ebd-a590-489b-96f3-f4b87352ceb3"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("46704eca-2943-4635-ae5b-0b9a4a9fa274"),
                            InstalationId = new Guid("13d901bf-8203-4280-ae70-24eef3fed196"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("46704eca-2943-4635-ae5b-0b9a4a9fa274"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("ecd856e4-96da-4296-a482-6f66680f1380"),
                            InstalationId = new Guid("13d901bf-8203-4280-ae70-24eef3fed196"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("ecd856e4-96da-4296-a482-6f66680f1380"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("6a1a286e-7523-4b64-bec5-a5350b4f8169"),
                            InstalationId = new Guid("13d901bf-8203-4280-ae70-24eef3fed196"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("6a1a286e-7523-4b64-bec5-a5350b4f8169"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("822edebf-23a5-4373-b56d-94078d984192"),
                            InstalationId = new Guid("13d901bf-8203-4280-ae70-24eef3fed196"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("878d9e51-f7c1-4460-b502-6d3611acc9de"),
                            InstalationId = new Guid("13d901bf-8203-4280-ae70-24eef3fed196"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("3e3070f2-48d9-4aa4-a760-5654f7d59b14"),
                            InstalationId = new Guid("13d901bf-8203-4280-ae70-24eef3fed196"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("dc64720a-db37-48a3-b0d9-da13abec71f7"),
                            InstalationId = new Guid("13d901bf-8203-4280-ae70-24eef3fed196"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("cb0d669c-0739-46cb-af7e-135b3c1359ab"),
                            InstalationId = new Guid("13d901bf-8203-4280-ae70-24eef3fed196"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("b5459434-2a22-47eb-b993-775edc6f4bf1"),
                            InstalationId = new Guid("13d901bf-8203-4280-ae70-24eef3fed196"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("c6f014d9-2816-4d1d-961f-9d313dbeb2ea"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("291a943f-27f5-45ec-b38a-c97f4e2cba89"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("08972cfc-c9f9-40fd-8bd9-5cb1a2137512"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("68c22160-dd62-44e3-b9fa-a5285aeed74a"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("d5ebbc22-5405-4a37-94d5-b76cb8dd489a"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("984b9932-5e9b-4bc9-a923-4099f7d488b2"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.DatabaseModels.FactoryModels.PlantInstalation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Идентификационен ключ");

                    b.Property<Guid>("ComplexId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id на комплекс");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Пълно наименование на инсталацията");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Съкратено наименование на инсталацията");

                    b.HasKey("Id");

                    b.HasIndex("ComplexId");

                    b.ToTable("PlantInstalations");

                    b.HasComment("Модел на инсталациите");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4dabf64e-adb1-486a-b208-b07c5fabc440"),
                            ComplexId = new Guid("d90ccba2-389c-4a1a-ac97-5c54340dadd4"),
                            FullName = "Водородна",
                            Name = "ВИ"
                        },
                        new
                        {
                            Id = new Guid("8b6563b0-5bc0-4778-bc4c-30fa347d9854"),
                            ComplexId = new Guid("fe306aa1-f678-4e94-9d86-308ed58fd305"),
                            FullName = "Втечнени газове, авто и жп. наливни естакади",
                            Name = "ВГ и АЖПН"
                        },
                        new
                        {
                            Id = new Guid("13d901bf-8203-4280-ae70-24eef3fed196"),
                            ComplexId = new Guid("d90ccba2-389c-4a1a-ac97-5c54340dadd4"),
                            FullName = "Газова сяра",
                            Name = "ГС"
                        },
                        new
                        {
                            Id = new Guid("439d96e7-35fd-4037-a88e-ac56dd11e9d8"),
                            ComplexId = new Guid("bd922bb0-94af-4bf0-9a99-2431661a27b6"),
                            FullName = "Гранулация на полипропилен",
                            Name = "ГППр"
                        },
                        new
                        {
                            Id = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            ComplexId = new Guid("d90ccba2-389c-4a1a-ac97-5c54340dadd4"),
                            FullName = "Каталитичен крекинг",
                            Name = "ККр"
                        },
                        new
                        {
                            Id = new Guid("c7d3bad4-cd8c-4a73-a98c-3e57fc04b09d"),
                            ComplexId = new Guid("79afcb01-d8f3-4fe0-9fa2-fd95b72c615f"),
                            FullName = "Каталитичен реформинг",
                            Name = "КР"
                        },
                        new
                        {
                            Id = new Guid("0d5fc355-ba0d-494e-aa2d-421616e9f651"),
                            ComplexId = new Guid("79afcb01-d8f3-4fe0-9fa2-fd95b72c615f"),
                            FullName = "МТБЕ и хидроочистка-1 и 3",
                            Name = "МТБЕ и ХО 1, 3"
                        },
                        new
                        {
                            Id = new Guid("c639c036-bdc1-4e54-9425-c77ab00658a3"),
                            ComplexId = new Guid("125b8f04-7c38-4d1b-b39e-6d750e7bd037"),
                            FullName = "Очистни съоръжения",
                            Name = "ЦПС"
                        },
                        new
                        {
                            Id = new Guid("38a9c7f5-45b6-4783-a1ba-365f22cb8cea"),
                            ComplexId = new Guid("bd922bb0-94af-4bf0-9a99-2431661a27b6"),
                            FullName = "Полимеризация на пропилен",
                            Name = "ПП"
                        },
                        new
                        {
                            Id = new Guid("5078a11e-d2b0-40ca-ae46-79d81197af11"),
                            ComplexId = new Guid("d90ccba2-389c-4a1a-ac97-5c54340dadd4"),
                            FullName = "Регенерация на МДЕА и кисели води",
                            Name = "РМДЕА и РКВ"
                        },
                        new
                        {
                            Id = new Guid("7e9d0982-c5fa-493d-b8b1-30babddbdfcc"),
                            ComplexId = new Guid("d90ccba2-389c-4a1a-ac97-5c54340dadd4"),
                            FullName = "Регенерация на хексан",
                            Name = "РХ"
                        },
                        new
                        {
                            Id = new Guid("27e67a5e-9def-417e-b479-a3374ac01357"),
                            ComplexId = new Guid("d90ccba2-389c-4a1a-ac97-5c54340dadd4"),
                            FullName = "Сярно-кисело алкилиране и абсорбционно газофракциони",
                            Name = "СКА"
                        },
                        new
                        {
                            Id = new Guid("e9e9f60a-057a-4105-8adb-b0f4f0fbfcc5"),
                            ComplexId = new Guid("125b8f04-7c38-4d1b-b39e-6d750e7bd037"),
                            FullName = "ТЕЦ и топлопренос",
                            Name = "ТЕЦ"
                        },
                        new
                        {
                            Id = new Guid("0c3d7329-a0af-45ee-8ba2-4ac6b0320e3e"),
                            ComplexId = new Guid("d90ccba2-389c-4a1a-ac97-5c54340dadd4"),
                            FullName = "Хидрокрекинг на гудрон",
                            Name = "ХККр"
                        },
                        new
                        {
                            Id = new Guid("35dbc6f8-e63e-46a5-98ec-305161eca10f"),
                            ComplexId = new Guid("79afcb01-d8f3-4fe0-9fa2-fd95b72c615f"),
                            FullName = "Хидрообезсерване на бензин-1 и Хидроочистка-2",
                            Name = "ХО 2"
                        },
                        new
                        {
                            Id = new Guid("50465de6-39bd-4370-9e51-b7f60f56130a"),
                            ComplexId = new Guid("79afcb01-d8f3-4fe0-9fa2-fd95b72c615f"),
                            FullName = "Хидроочистка-5",
                            Name = "ХО 5"
                        },
                        new
                        {
                            Id = new Guid("e90898e2-831b-4266-8d4c-014cffefcf56"),
                            ComplexId = new Guid("125b8f04-7c38-4d1b-b39e-6d750e7bd037"),
                            FullName = "Химично обезсоляване на води и оборотно водоснабдяване",
                            Name = "ХВО"
                        },
                        new
                        {
                            Id = new Guid("c05340da-e358-47f7-822e-bde8030f456a"),
                            ComplexId = new Guid("79afcb01-d8f3-4fe0-9fa2-fd95b72c615f"),
                            FullName = "Централно газофракциониране и хидрообезсерване",
                            Name = "ЦГФИ"
                        },
                        new
                        {
                            Id = new Guid("1b3e962a-ab8f-4fec-87d3-3221edb3bad0"),
                            ComplexId = new Guid("d90ccba2-389c-4a1a-ac97-5c54340dadd4"),
                            FullName = "Производство на битуми и резервоарен парк за тъмни горива",
                            Name = "БИ"
                        });
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.DatabaseModels.FactoryModels.ProductionComplex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Идентификационен ключ");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Пълно наименование на комплекса");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Указател, показващ дали модела на комплекса е изтрит");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Съкратено наименование на комплекса");

                    b.HasKey("Id");

                    b.ToTable("ProductionComplexes");

                    b.HasComment("Модел на производствените комплекси");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d90ccba2-389c-4a1a-ac97-5c54340dadd4"),
                            FullName = "Дълбочинна преработка на нефт",
                            IsDeleted = false,
                            Name = "ДПН"
                        },
                        new
                        {
                            Id = new Guid("125b8f04-7c38-4d1b-b39e-6d750e7bd037"),
                            FullName = "Енергиен",
                            IsDeleted = false,
                            Name = "Eн"
                        },
                        new
                        {
                            Id = new Guid("bd922bb0-94af-4bf0-9a99-2431661a27b6"),
                            FullName = "Полипропилен",
                            IsDeleted = false,
                            Name = "ППр"
                        },
                        new
                        {
                            Id = new Guid("79afcb01-d8f3-4fe0-9fa2-fd95b72c615f"),
                            FullName = "Първична преработка на нефт",
                            IsDeleted = false,
                            Name = "ППН"
                        },
                        new
                        {
                            Id = new Guid("fe306aa1-f678-4e94-9d86-308ed58fd305"),
                            FullName = "Транспорт и съхранение на нефтопродукти и Пристанищен Терминал",
                            IsDeleted = false,
                            Name = "ТСНП и ПТ"
                        });
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.DatabaseModels.SafeAssignmentDocumentModels.SafeAssignmentDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Идентификационен ключ");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата и час на закриване на наряда");

                    b.Property<Guid?>("ElectricianAppliedVoltageId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id на потребител подал напрежение");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Състояние на наряда");

                    b.Property<bool>("IsAppliedVoltage")
                        .HasColumnType("bit")
                        .HasComment("Състояние на технологичната позиция");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Номер на наряд според вътрешнонарядната номерация");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата и час на откриване на наряда");

                    b.Property<Guid>("PersonRequestedOpeningOrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id на потребител, поискал откриване на наряда");

                    b.Property<Guid?>("PersonRequestedVoltageSupplyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id на потребител поискал подаване на напрежение");

                    b.Property<Guid>("TechnologicalPositionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id на технологична позиция");

                    b.Property<Guid?>("ЕlectricianClosingOrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id на потребител закрил наряда");

                    b.Property<Guid?>("ЕlectricianOpeningOrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id на потребител открил наряда");

                    b.HasKey("Id");

                    b.HasIndex("ElectricianAppliedVoltageId");

                    b.HasIndex("PersonRequestedOpeningOrderId");

                    b.HasIndex("PersonRequestedVoltageSupplyId");

                    b.HasIndex("TechnologicalPositionId");

                    b.HasIndex("ЕlectricianClosingOrderId");

                    b.HasIndex("ЕlectricianOpeningOrderId");

                    b.ToTable("SafeAssignmentDocuments");

                    b.HasComment("Модел на нарядите");
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.DatabaseModels.StaffsModels.ChangedSchedule", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Дата");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id на потребител който е на смяна(оператор или дежурен електромонтьор)");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id на смяна");

                    b.HasKey("Date", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ShiftId");

                    b.ToTable("ChangedsSchedules");

                    b.HasComment("Модел на сменния график");
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.DatabaseModels.StaffsModels.WorkingShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Идентификационен ключ");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasComment("Краен час на смяната");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Име на смяната");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasComment("Начален час на смяната");

                    b.HasKey("Id");

                    b.ToTable("WorkingShifts");

                    b.HasComment("Модел на смените");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8dd62cbc-0f4d-4868-bdaa-0bb3980fc47d"),
                            EndTime = new DateTime(1, 1, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            ShiftName = "Р",
                            StartTime = new DateTime(1, 1, 1, 7, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("51e3023b-5967-4221-ba1e-977fdff10eda"),
                            EndTime = new DateTime(1, 1, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            ShiftName = "1",
                            StartTime = new DateTime(1, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ad095ab8-ed2b-4f15-9f2d-088188db4ee2"),
                            EndTime = new DateTime(1, 1, 2, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            ShiftName = "2",
                            StartTime = new DateTime(1, 1, 1, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.FactoryModels.TechnologicalPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Идентификационен ключ");

                    b.Property<Guid>("InstalationId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id на инсталация");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Наименование на технологичната позиция");

                    b.HasKey("Id");

                    b.HasIndex("InstalationId");

                    b.ToTable("TechnologicalPositions");

                    b.HasComment("Модел на технологична позиция");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c5e037a-4ad6-4ada-a3c8-bf8aa34b90ee"),
                            InstalationId = new Guid("13d901bf-8203-4280-ae70-24eef3fed196"),
                            Name = "MJ 401 A"
                        },
                        new
                        {
                            Id = new Guid("0da0c03c-eb4a-44dd-bb47-2438d7cd128b"),
                            InstalationId = new Guid("13d901bf-8203-4280-ae70-24eef3fed196"),
                            Name = "MJ 401 B"
                        },
                        new
                        {
                            Id = new Guid("3e61213e-5e51-4848-a916-51d45fb55dd9"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "B5"
                        },
                        new
                        {
                            Id = new Guid("e4914783-4d0f-4afa-b34e-9cbbf7953558"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "Н102-2"
                        },
                        new
                        {
                            Id = new Guid("ab117d29-20b6-400a-9747-0f8d1b8d098f"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "Н102-P"
                        },
                        new
                        {
                            Id = new Guid("936edbb9-9444-44cd-89f3-80fb27d70e9a"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "ЦК 201-1"
                        },
                        new
                        {
                            Id = new Guid("15d1308a-2e55-467c-b251-ee4b38262723"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "В 403"
                        },
                        new
                        {
                            Id = new Guid("7fcd955b-a234-4f5e-bb1d-68afd2374038"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "ЦК 201-2"
                        },
                        new
                        {
                            Id = new Guid("f48f6af8-4aa4-423f-b24f-9fbdfc4b0b39"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "Н102-1"
                        },
                        new
                        {
                            Id = new Guid("465a93ad-50e3-4b59-991a-1b9d1c04cf4e"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "В7"
                        },
                        new
                        {
                            Id = new Guid("1a452cb1-b1d1-4b48-9159-badcc40ba590"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "В6"
                        },
                        new
                        {
                            Id = new Guid("2c107550-7b23-4478-af9b-448d50d65a23"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "В102"
                        },
                        new
                        {
                            Id = new Guid("cd394570-be68-4b7f-8ee3-d9dc13caaf60"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "ЦП1"
                        },
                        new
                        {
                            Id = new Guid("6e7763d6-a561-4407-b95a-bcc0ec3ec42b"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "ЦП2"
                        },
                        new
                        {
                            Id = new Guid("6cc1db50-1604-4e5a-94de-cc3087cee06e"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "Н 210-3"
                        },
                        new
                        {
                            Id = new Guid("3a7e4c0e-6b25-4707-874d-953d619e7d93"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "Н 109"
                        },
                        new
                        {
                            Id = new Guid("1b1b7597-8065-4b33-8b7e-eb4fae5d4603"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "ПК101Р"
                        },
                        new
                        {
                            Id = new Guid("0487b9c4-ceca-47d0-9ea5-4ef33d9262c2"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "Н 109-1"
                        },
                        new
                        {
                            Id = new Guid("d926a392-d513-45a2-ada8-fe5a05ece6eb"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "ЦК 301"
                        },
                        new
                        {
                            Id = new Guid("a77de888-4132-4f2c-b0f7-bb7ffac78bf0"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "ЦК 301 Р"
                        },
                        new
                        {
                            Id = new Guid("1272bde9-d132-4a76-8be1-da94f41100e6"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "Н 109-2"
                        },
                        new
                        {
                            Id = new Guid("9ed832f2-c9b9-4bcf-b05f-388fe35c794d"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "ПК101"
                        },
                        new
                        {
                            Id = new Guid("c36b152f-e0e7-47b6-8776-ca90537b3b59"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "Н 109-Р"
                        },
                        new
                        {
                            Id = new Guid("2b1bca55-1492-4688-a530-04f88917888b"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "ЦП 3"
                        },
                        new
                        {
                            Id = new Guid("ace79e04-4547-4161-8212-dda77d678a42"),
                            InstalationId = new Guid("973994a0-3ee2-4aba-b422-bc12be18040c"),
                            Name = "ЦП 4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SafeAssignmentSystem.DataBase.Data.DatabaseModels.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SafeAssignmentSystem.DataBase.Data.DatabaseModels.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafeAssignmentSystem.DataBase.Data.DatabaseModels.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SafeAssignmentSystem.DataBase.Data.DatabaseModels.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.DatabaseModels.Account.ApplicationUserPlantInstalation", b =>
                {
                    b.HasOne("SafeAssignmentSystem.DataBase.Data.DatabaseModels.FactoryModels.PlantInstalation", "Instalation")
                        .WithMany("ApplicationUserPlantInstalations")
                        .HasForeignKey("InstalationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SafeAssignmentSystem.DataBase.Data.DatabaseModels.Account.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserPlantInstalations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Instalation");
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.DatabaseModels.FactoryModels.PlantInstalation", b =>
                {
                    b.HasOne("SafeAssignmentSystem.DataBase.Data.DatabaseModels.FactoryModels.ProductionComplex", "Complex")
                        .WithMany("PlantInstalations")
                        .HasForeignKey("ComplexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complex");
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.DatabaseModels.SafeAssignmentDocumentModels.SafeAssignmentDocument", b =>
                {
                    b.HasOne("SafeAssignmentSystem.DataBase.Data.DatabaseModels.Account.ApplicationUser", "ElectricianAppliedVoltage")
                        .WithMany("ElectriciansAppliedsVoltage")
                        .HasForeignKey("ElectricianAppliedVoltageId");

                    b.HasOne("SafeAssignmentSystem.DataBase.Data.DatabaseModels.Account.ApplicationUser", "PersonRequestedOpeningOrder")
                        .WithMany("PersonsRequestedsOpeningOrders")
                        .HasForeignKey("PersonRequestedOpeningOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafeAssignmentSystem.DataBase.Data.DatabaseModels.Account.ApplicationUser", "PersonRequestedVoltageSupply")
                        .WithMany("PersonsRequestedsVoltageSupply")
                        .HasForeignKey("PersonRequestedVoltageSupplyId");

                    b.HasOne("SafeAssignmentSystem.DataBase.Data.FactoryModels.TechnologicalPosition", "TechnologicalPosition")
                        .WithMany("SafeAssignmentDocuments")
                        .HasForeignKey("TechnologicalPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafeAssignmentSystem.DataBase.Data.DatabaseModels.Account.ApplicationUser", "ЕlectricianClosingOrder")
                        .WithMany("ЕlectriciansClosingOrders")
                        .HasForeignKey("ЕlectricianClosingOrderId");

                    b.HasOne("SafeAssignmentSystem.DataBase.Data.DatabaseModels.Account.ApplicationUser", "ЕlectricianOpeningOrder")
                        .WithMany("ЕlectriciansOpeningOrders")
                        .HasForeignKey("ЕlectricianOpeningOrderId");

                    b.Navigation("ElectricianAppliedVoltage");

                    b.Navigation("PersonRequestedOpeningOrder");

                    b.Navigation("PersonRequestedVoltageSupply");

                    b.Navigation("TechnologicalPosition");

                    b.Navigation("ЕlectricianClosingOrder");

                    b.Navigation("ЕlectricianOpeningOrder");
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.DatabaseModels.StaffsModels.ChangedSchedule", b =>
                {
                    b.HasOne("SafeAssignmentSystem.DataBase.Data.DatabaseModels.Account.ApplicationUser", "ApplicationUser")
                        .WithMany("ChangedsSchedules")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafeAssignmentSystem.DataBase.Data.DatabaseModels.StaffsModels.WorkingShift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.FactoryModels.TechnologicalPosition", b =>
                {
                    b.HasOne("SafeAssignmentSystem.DataBase.Data.DatabaseModels.FactoryModels.PlantInstalation", "Instalation")
                        .WithMany("TechnologicalPositions")
                        .HasForeignKey("InstalationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instalation");
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.DatabaseModels.Account.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserPlantInstalations");

                    b.Navigation("ChangedsSchedules");

                    b.Navigation("ElectriciansAppliedsVoltage");

                    b.Navigation("PersonsRequestedsOpeningOrders");

                    b.Navigation("PersonsRequestedsVoltageSupply");

                    b.Navigation("ЕlectriciansClosingOrders");

                    b.Navigation("ЕlectriciansOpeningOrders");
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.DatabaseModels.FactoryModels.PlantInstalation", b =>
                {
                    b.Navigation("ApplicationUserPlantInstalations");

                    b.Navigation("TechnologicalPositions");
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.DatabaseModels.FactoryModels.ProductionComplex", b =>
                {
                    b.Navigation("PlantInstalations");
                });

            modelBuilder.Entity("SafeAssignmentSystem.DataBase.Data.FactoryModels.TechnologicalPosition", b =>
                {
                    b.Navigation("SafeAssignmentDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
